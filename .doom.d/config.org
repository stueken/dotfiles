* Overview / Help
Started with the heading structure of this literate config similar to this:
https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/

Some info from Doom side how to use the config.el (~:tangle no~ disables tangling of the code block):

#+begin_src emacs-lisp :tangle no
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.


#+end_src

** Examples

Define custom keybinds with prefixes for the leader menu

#+begin_src emacs-lisp :tangle no
(map! :leader
      (:prefix ("e" . "exports"
       :desc "Export Org to HTML"
       "h" #'org-html-export-to-html))
#+end_src

* Doom Emacs
** General configuration

My user information:
#+begin_src emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Norbert St√ºken"
      user-mail-address "norbert.stueken@nrbrt.com")
#+end_src

Enable line numbers:

#+begin_src emacs-lisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src

** Visual, session and window settings
*** Font

Just info about how to configure fonts, not written to the config.

#+begin_src emacs-lisp :tangle no
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!
#+end_src

*** Theme
- https://github.com/doomemacs/themes
- Defaults are shown [[https://github.com/doomemacs/themes#manually--use-package][here]]
- [[https://github.com/doomemacs/themes][Screenshots of all themes]] or temporarily load a theme with ~SPC h t~.

Choosing the standard theme now: wombat.

#+begin_src emacs-lisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'wombat)
#+end_src

Likes:
- doom-1337
- doom-homage-black
- doom-monokai-pro
- wombat

** Packages
*** Deft
#+begin_src emacs-lisp
(setq deft-directory "~/Documents"
      deft-extensions '("org", "txt")
      deft-recursive t)
#+end_src

*** Projectile

#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/Nextcloud/coding/"))
#+end_src

* Org mode
** General Org Configuration

Set org-directory to a custom one (default is "~/org/"):

#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Documents/org/")
#+end_src

Insert Org headings at point, not after the current subtree (this is enabled by default by Doom).

#+begin_src emacs-lisp
(after! org (setq org-insert-heading-respect-content nil))
#+end_src
*** Custom Output directory for exports

Modify the output directory for exported Org files.

This function is an advice around ~org-export-output-file-name~
that modifies the output directory for exported Org files. If
~pub-dir~ is not specified, it sets it to a subdirectory named
"export" within the ~org-directory~.

Parameters:
- ORIG-FUN: The original function being advised.
- EXTENSION: The file extension for the exported file.
- SUBTREEP: Whether to export only the current subtree.
- PUB-DIR: The output directory for the exported file.

Returns: The modified output file name.
#+begin_src emacs-lisp
(defun org-export-output-file-name-modified (orig-fun extension &optional subtreep pub-dir)
  (unless pub-dir
    (setq pub-dir (concat (file-name-as-directory org-directory) "export"))
    (unless (file-directory-p pub-dir)
      (make-directory pub-dir)))
  (apply orig-fun extension subtreep pub-dir nil))
(advice-add 'org-export-output-file-name :around #'org-export-output-file-name-modified)
#+end_src

** TODO Org visual settings

Enable variable and visual line mode

- variable-pitch-mode:
  Alters the visual presentation of text in a buffer by making it use a variable-width (proportional) font, instead of a fixed-width (monospace) font.
- visual-line-mode:
  Line breaks at end of text area

#+begin_src emacs-lisp
(add-hook! org-mode :append
           #'visual-line-mode)
           ;; #'variable-pitch-mode)
#+end_src

Hide Org markers that indicate text emphasis (like bold, italics, etc.) around words.

#+begin_src emacs-lisp
(after! org (setq org-hide-emphasis-markers t))
#+end_src

Use [[https://github.com/awth13/org-appear][org-appear]] to show hidden emphasis markers when moving the cursor over them.

#+begin_src emacs-lisp
(after! org
  (use-package! org-appear
    :hook (org-mode . org-appear-mode)))
#+end_src
** Babel
Add Mermaid.js Org mode integration: [[https://github.com/arnm/ob-mermaid][ob-mermaid]]

#+begin_src emacs-lisp
(setq ob-mermaid-cli-path "/usr/local/bin/mmdc")
#+end_src

#+begin_src
(org-babel-do-load-languages
    'org-babel-load-languages
    '((mermaid . t)
      (plantuml . t)
      (scheme . t)))
#+end_src

** Capturing and note taking
*** TODO Org-Roam

Keep Org-roam notes separate to other directories:
#+begin_src emacs-lisp
(setq org-roam-directory (concat org-directory "notes/"))
#+end_src

Ensure Org-roam is available on start
#+begin_src emacs-lisp
(org-roam-db-autosync-mode)
#+end_src

Ensure org-capture settings do not add a #+title line
#+begin_src  emacs-lisp
(setq org-capture-templates nil)
#+end_src

Change the file name format by modifying the ~org-roam-capture-templates~ variable.
#+begin_src emacs-lisp
(setq org-roam-capture-templates
  '(("m" "main" plain "%?"
   :if-new (file+head "main/${slug}.org"
			    "#+title: ${title}\n")
   :immediate-finish t  ; bypass capture system
	 :unnarrowed t)
  ("j" "jowo" plain "%?"
   :if-new (file+head "jowo/${slug}.org"
			    "#+title: ${title}\n#+TODO: TODO NEXT IN-PROGRESS ON-HOLD | DONE CANCEL\n")
   :immediate-finish t
	 :unnarrowed t)
  ("p" "personal" plain "%?"
   :if-new (file+head "personal/${slug}.org"
			    "#+title: ${title}\n")
   :immediate-finish t
	 :unnarrowed t)
	("r" "reference" plain "%?"
	 :if-new (file+head "reference/${title}.org"
			    "#+title: ${title}\n")
	 :immediate-finish t
	 :unnarrowed t)
	("a" "article" plain "%?"
	 :if-new (file+head "articles/${title}.org"
		  "#+title: ${title}\n#filetags: :article:\n")
	 :immediate-finish t
	 :unnarrowed t)))
#+end_src

Configure attachments to be stored together with their Org document.

TODO: this makes problems
#+begin_src emacs-lisp :tangle no
(setq org-attach-id-dir "attachments/"
#+end_src

**** Custom node type

Creating the property "type" on my nodes
#+begin_src emacs-lisp
  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the TYPE of NODE."
    (condition-case nil
      (file-name-nondirectory
       (directory-file-name
        (file-name-directory
	 (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (error "")))
#+end_src

Modify the display template to show the node "type".
#+begin_src emacs-lisp
(setq org-roam-node-display-template
      (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
#+end_src
**** Custom subdirectory toggle

Define functions to toggle the inclusion/exclusion of certain subdirectories when indexing and searching the knowledge base.
*Note:* This version of the function handles both cases: when ~org-roam-file-exclude-regexp~ is a string and when it's a list of strings. It toggles the inclusion/exclusion of the subdirectory accordingly.
#+begin_src emacs-lisp
(defun nrbrt/org-roam-toggle-personal-subdirectory ()
  (interactive)
  (if (listp org-roam-file-exclude-regexp)
      (if (member "personal" org-roam-file-exclude-regexp)
          (setq org-roam-file-exclude-regexp (delete "personal" org-roam-file-exclude-regexp))
        (add-to-list 'org-roam-file-exclude-regexp "personal"))
    (setq org-roam-file-exclude-regexp
          (if (string-match-p "personal" org-roam-file-exclude-regexp)
              (replace-regexp-in-string "\\|personal" "" org-roam-file-exclude-regexp)
            (concat org-roam-file-exclude-regexp "\\|personal"))))
  (org-roam-db-sync))
#+end_src

**** Custom batch file rename

The ~generate-slug-from-file-title function~ extracts the title property from the org-mode file and generates a slug by replacing non-alphanumeric characters with hyphens. The ~rename-org-files~ function uses this slug to rename the files accordingly. The ~update-links~ function updates the links in all ".org" files in org-roam-directory.

#+begin_src emacs-lisp
(defun rename-org-files ()
  "Rename .org files in `org-roam-directory` according to the '${slug}.org' template."
  (interactive)
  (let ((dir org-roam-directory))
    (dolist (file (directory-files-recursively dir "\\.org$"))
      (let* ((old-file (file-truename file))
             (slug (generate-slug-from-file-title file))
             (new-file (expand-file-name (format "%s.org" slug) (file-name-directory old-file))))
        (unless (string= old-file new-file)
          (rename-file old-file new-file t)
          (update-links-in-file new-file slug))))))

(defun generate-slug-from-file-title (file)
  "Generate a slug from the 'title' property in the FILE."
  (with-temp-buffer
    (insert-file-contents file)
    (let ((case-fold-search t))
      (if (re-search-forward "^#\\+title: \\(.+\\)$" nil t)
          (let ((title (match-string 1)))
            (replace-regexp-in-string "[^[:alnum:]]+" "-" (downcase title)))
        "untitled"))))

(defun update-links ()
  "Update links in all .org files in `org-roam-directory`."
  (interactive)
  (let ((dir org-roam-directory))
    (dolist (file (directory-files-recursively dir "\\.org$"))
      (let* ((slug (generate-slug-from-file-title file)))
        (update-links-in-file file slug)))))

(defun update-links-in-file (file slug)
  "Update links in FILE to the new SLUG."
  (find-file file)
  (goto-char (point-min))
  (while (re-search-forward (format "\\[\\[.*?%s\\]\\[.*?\\]\\]" slug) nil t)
    (replace-match (format "[[%s][%s]]" slug (match-string 0))))
  (save-buffer)
  (kill-buffer))
#+end_src

**** org-roam-ui
#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
*** TODO Tasks and agenda

[[https://github.com/alphapapa/org-super-agenda][org-super-agenda]] provides great grouping and customization features to make agenda mode easier to use.

Macro used for package configuration
Example from Emacs Doom E05

#+begin_src emacs-lisp
(use-package! org-super-agenda
  ;should load after org-agenda
  :after org-agenda
  :init
  (setq org-super-agenda-groups '((:name "Today"
                                         :time-grid t
                                         :scheduled today)
                                  (:name "Due today"
                                         :deadline today)
                                  (:name "Important"
                                         :priority "A")
                                  (:name "Overdue"
                                         :deadline past)
                                  (:name "Due soon"
                                         :deadline future)
                                  (:name "Big Outcomes"
                                         :tag "bo")))
  :config
  (org-super-agenda-mode))
#+end_src

Use org-clock to track time spend on tasks and persist all running clocks and their history when restarting emacs.

#+begin_src emacs-lisp
(after! org-clock
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate))
#+end_src
*** TODO GTD
Check out Trevoke‚Äôs [[https://github.com/Trevoke/org-gtd.el][org-gtd]]. This looks like a very promising approach.
For an example config, check here: https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/#gtd
*** TODO Exporting a Curriculum Vitae
see https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/#exporting-a-curriculum-vitae
*** TODO Blogging with Hugo
*** TODO Reveal.js presentations
*** TODO Other exporters
**** ox-jira
Export in Jira / Confluence markup format

#+begin_src emacs-lisp
(use-package! ox-jira
  :after org)
#+end_src
**** TODO org-jira
https://github.com/ahungry/org-jira
**** reStructuredText (ReST)
https://github.com/msnoigrs/ox-rst

#+begin_src emacs-lisp
;; Ensure ox-rst is loaded when org-mode starts.
(after! org
  (require 'ox-rst))
#+end_src

*** Org-journal
**** Format Journals

Format Org-Journal entries

#+begin_src emacs-lisp
(setq org-journal-date-prefix "#+TITLE: "
      org-journal-time-prefix "* "
      org-journal-file-format "%Y-%m-%d.org")

#+end_src

Define TODO keywords. Default is:
- TODO(t): The task needs to be done.
- PROJ(p): The task is a project, which is a task with subtasks.
- LOOP(r): The task is recurring and will be repeated.
- STRT(s): The task has been started.
- WAIT(w): The task is waiting for something else to happen before it can proceed.
- HOLD(h): The task is passed or on hold.
- IDEA(i): The task is still an idea an hasn't been brought into action yet. Could used for tasks still being considered -> someday/maybe list in GTD
- |
- DONE(d): The task has been completed.
- KILL(k): The task has been cancelled.
- [ ], [-], [?] | [X]: These are used for checkbox items.
- OKAY(o), YES(y) | NO(n): These might be used for tasks that require a simple binary (yes/no) or ternary (yes/no/okay) response.

To change the state, just use ~SPC m t~ (~org-todo~) and the shortcut key.

**** Multiple Journals

Keep folders for a separate personal and work (jowo) journal and allow to switch between them.

#+begin_src emacs-lisp
(defun switch-to-personal-journal ()
  (interactive)
  ; file-name-as-directory ensures that org-directory ends with a slash
  (setq org-journal-dir (concat (file-name-as-directory org-directory) "journals/personal/")))

(defun switch-to-jowo-journal ()
  (interactive)
  (setq org-journal-dir (concat (file-name-as-directory org-directory) "journals/jowo/")))
#+end_src

Create new keybindings to create personal entries with ~SPC n j j~ and  new Jowo entries with ~SPC n j w~.

#+begin_src emacs-lisp
(map! :leader
     (:prefix ("n" . "notes")
      (:prefix ("j" . "journal")
       :desc "New personal journal entry" "j" (lambda () (interactive) (switch-to-personal-journal) (org-journal-new-entry nil))
       :desc "New work (jowo) journal entry" "w" (lambda () (interactive) (switch-to-jowo-journal) (org-journal-new-entry nil)))))
#+end_src
